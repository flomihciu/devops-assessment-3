- name: Deploy Movie DB App
  hosts: web
  become: true

  vars:
    db_name: "{{ lookup('env', 'DB_NAME') }}"
    db_user: "{{ lookup('env', 'DB_USER') }}"
    db_password: "{{ lookup('env', 'DB_PASSWORD') }}"
    rds_endpoint: "{{ lookup('env', 'RDS_ENDPOINT') }}"

  tasks:
    - name: Install PostgreSQL client (for RDS access)
      apt:
        name: postgresql-client
        state: present
        update_cache: true

    - name: Install psycopg2 for PostgreSQL support
      apt:
        name: python3-psycopg2
        state: present
        update_cache: true

    - name: Source environment variables from .env
      shell: |
        set -a
        source /home/ubuntu/.env
        set +a
      args:
        executable: /bin/bash

    - name: "DEBUG: Show passed-in RDS endpoint"
      debug:
        msg: "RDS endpoint: {{ rds_endpoint }}"

    - name: Ensure flo-db exists in RDS
      community.postgresql.postgresql_db:
        name: "{{ db_name }}"
        state: present
        login_host: "{{ rds_endpoint }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: 5432
        ssl_mode: require

    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: true

    - name: Ensure Docker CLI plugin directory exists
      file:
        path: /usr/local/lib/docker/cli-plugins
        state: directory
        mode: '0755'

    - name: Download Docker Compose v2 plugin
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64
        dest: /usr/local/lib/docker/cli-plugins/docker-compose
        mode: '0755'

    - name: Copy docker-compose.yml to EC2
      copy:
        src: ../docker-compose.yml
        dest: /home/ubuntu/docker-compose.yml

    - name: Generate .env file from template
      template:
        src: templates/env.j2
        dest: /home/ubuntu/.env
        mode: '0644'

    - name: Print .env contents for debug
      shell: cat /home/ubuntu/.env

    - name: Stop all running containers
      shell: docker stop $(docker ps -aq) || true

    - name: Remove all containers
      shell: docker rm $(docker ps -aq) || true

    - name: Run docker compose down
      shell: docker compose down || true
      args:
        chdir: /home/ubuntu

    - name: Pull latest images
      shell: docker compose pull
      args:
        chdir: /home/ubuntu

    - name: Start containers with Docker Compose
      community.docker.docker_compose_v2:
        project_src: /home/ubuntu
        state: present

    - name: Pause to allow services to stabilize
      pause:
        seconds: 5

    - name: Show running containers
      shell: docker ps

    - name: Show logs from all containers
      shell: docker ps -aq | xargs -r docker logs || true
      register: all_logs

    - name: Print all container logs
      debug:
        msg: "{{ all_logs.stdout }}"

    - name: Wait for backend app to respond
      shell: curl -s -o /dev/null -w "%{http_code}" http://localhost:5000 || true
      register: backend_status
      retries: 20
      delay: 3
      until: backend_status.stdout == "200"

    - name: Fail if backend app did not return 200
      fail:
        msg: "Backend app is not responding as expected!"
      when: backend_status.stdout != "200"

    - name: Debug backend status code
      debug:
        msg: "Backend responded with status code: {{ backend_status.stdout }}"
