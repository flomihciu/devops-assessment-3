- name: Deploy Movie DB App
  hosts: web
  become: true

  tasks:
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: true

    - name: Ensure Docker CLI plugin directory exists
      file:
        path: /usr/local/lib/docker/cli-plugins
        state: directory
        mode: '0755'

    - name: Download Docker Compose v2 plugin
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64
        dest: /usr/local/lib/docker/cli-plugins/docker-compose
        mode: '0755'

    - name: Verify Docker Compose v2 is installed
      command: docker compose version

    - name: Copy docker-compose.yml to EC2
      ansible.builtin.copy:
        src: ../docker-compose.yml
        dest: /home/ubuntu/docker-compose.yml

    - name: Generate .env file from template
      ansible.builtin.template:
        src: templates/env.j2
        dest: /home/ubuntu/.env
        mode: '0644'

    - name: Stop all running containers
      ansible.builtin.shell: docker stop $(docker ps -aq) || true

    - name: Remove all containers
      ansible.builtin.shell: docker rm $(docker ps -aq) || true

    - name: Run docker compose down (clean up volumes/networks)
      ansible.builtin.shell: docker compose down || true
      args:
        chdir: /home/ubuntu

    - name: Ensure containers are running with Docker Compose v2
      community.docker.docker_compose_v2:
        project_src: /home/ubuntu
        state: present

    - name: Show running containers
      ansible.builtin.shell: docker ps

    - name: Show logs from backend container
      ansible.builtin.shell: docker logs $(docker ps -aqf "name=backend") || true

    - name: Wait for backend app to respond
      ansible.builtin.shell: curl -s -o /dev/null -w "%{http_code}" http://localhost:5000 || true
      register: backend_status
      retries: 20
      delay: 3
      until: backend_status.stdout == "200"

    - name: Fail if backend app did not return 200
      ansible.builtin.fail:
        msg: "Backend app is not responding as expected!"
      when: backend_status.stdout != "200"

    - name: Debug backend status code
      ansible.builtin.debug:
        msg: "Backend responded with status code: {{ backend_status.stdout }}"
