name: Provision Infrastructure

on:
  push: {}
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq ansible gh
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Temporarily disable backend config for bootstrap
        run: mv terraform/backend.tf terraform/backend.tf.bak

      - name: Conditionally create S3 backend resources
        run: |
          S3_BUCKET="do-assessment3-movie-db-flo"
          if aws s3api head-bucket --bucket "$S3_BUCKET" 2>/dev/null; then
            echo "S3 bucket exists."
          else
            echo "Creating S3 and DynamoDB resources for backend..."
            terraform -chdir=terraform init -backend=false
            terraform -chdir=terraform apply -auto-approve
          fi
        env:
          TF_VAR_ec2_key_pair_name: ${{ secrets.AWS_SSH_KEY_NAME }}
          TF_VAR_db_username: ${{ secrets.DB_USER }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Restore backend config
        run: mv terraform/backend.tf.bak terraform/backend.tf

      - name: Clean local Terraform state before reinitialization
        run: rm -rf terraform/.terraform terraform/.terraform.lock.hcl

      - name: Terraform Init
        run: terraform -chdir=terraform init -reconfigure -input=false -force-copy
        env:
          TF_VAR_ec2_key_pair_name: ${{ secrets.AWS_SSH_KEY_NAME }}
          TF_VAR_db_username: ${{ secrets.DB_USER }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Import
        run: |
          if aws iam get-role --role-name flo-ec2-role 2>/dev/null; then
            if ! terraform -chdir=terraform state list | grep aws_iam_role.ec2_role; then
              terraform -chdir=terraform import -lock=false aws_iam_role.ec2_role flo-ec2-role
            fi
          fi
          if aws iam get-instance-profile --instance-profile-name flo-ec2-instance-profile 2>/dev/null; then
            if ! terraform -chdir=terraform state list | grep aws_iam_instance_profile.ec2_instance_profile; then
              terraform -chdir=terraform import -lock=false aws_iam_instance_profile.ec2_instance_profile flo-ec2-instance-profile
            fi
          fi
          if aws rds describe-db-instances --db-instance-identifier flo-postgres-db 2>/dev/null; then
            if ! terraform -chdir=terraform state list | grep aws_db_instance.db; then
              terraform -chdir=terraform import -lock=false aws_db_instance.db flo-postgres-db
            fi
          fi
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=flo-vpc" --query "Vpcs[0].VpcId" --output text)
          if [ "$VPC_ID" != "None" ] && [ -n "$VPC_ID" ]; then
            if ! terraform -chdir=terraform state list | grep aws_vpc.main_vpc; then
              terraform -chdir=terraform import -lock=false aws_vpc.main_vpc $VPC_ID
            fi
            IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query "InternetGateways[0].InternetGatewayId" --output text)
            if [ "$IGW_ID" != "None" ] && [ -n "$IGW_ID" ]; then
              if ! terraform -chdir=terraform state list | grep aws_internet_gateway.igw; then
                terraform -chdir=terraform import -lock=false aws_internet_gateway.igw $IGW_ID
              fi
            fi
          fi
          SUBNET1_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=flo-public-subnet-1" --query "Subnets[0].SubnetId" --output text)
          if [ "$SUBNET1_ID" != "None" ] && [ -n "$SUBNET1_ID" ]; then
            if ! terraform -chdir=terraform state list | grep aws_subnet.public_subnet_1; then
              terraform -chdir=terraform import -lock=false aws_subnet.public_subnet_1 $SUBNET1_ID
            fi
          fi
          SUBNET2_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=flo-public-subnet-2" --query "Subnets[0].SubnetId" --output text)
          if [ "$SUBNET2_ID" != "None" ] && [ -n "$SUBNET2_ID" ]; then
            if ! terraform -chdir=terraform state list | grep aws_subnet.public_subnet_2; then
              terraform -chdir=terraform import -lock=false aws_subnet.public_subnet_2 $SUBNET2_ID
            fi
          fi
          APP_SG_ID=$(aws ec2 describe-security-groups --filters "Name=tag:Name,Values=flo-app-sg" --query "SecurityGroups[0].GroupId" --output text)
          if [ "$APP_SG_ID" != "None" ] && [ -n "$APP_SG_ID" ]; then
            if ! terraform -chdir=terraform state list | grep aws_security_group.app_sg; then
              terraform -chdir=terraform import -lock=false aws_security_group.app_sg $APP_SG_ID
            fi
          fi
          DB_SG_ID=$(aws ec2 describe-security-groups --filters "Name=tag:Name,Values=flo-db-sg" --query "SecurityGroups[0].GroupId" --output text)
          if [ "$DB_SG_ID" != "None" ] && [ -n "$DB_SG_ID" ]; then
            if ! terraform -chdir=terraform state list | grep aws_security_group.db_sg; then
              terraform -chdir=terraform import -lock=false aws_security_group.db_sg $DB_SG_ID
            fi
          fi
          if aws rds describe-db-subnet-groups --db-subnet-group-name flo-db-subnet-group 2>/dev/null; then
            if ! terraform -chdir=terraform state list | grep aws_db_subnet_group.db_subnet_group; then
              terraform -chdir=terraform import -lock=false aws_db_subnet_group.db_subnet_group flo-db-subnet-group
            fi
          fi
        env:
          TF_VAR_ec2_key_pair_name: ${{ secrets.AWS_SSH_KEY_NAME }}
          TF_VAR_db_username: ${{ secrets.DB_USER }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve -input=false -lock=false
        env:
          TF_VAR_ec2_key_pair_name: ${{ secrets.AWS_SSH_KEY_NAME }}
          TF_VAR_db_username: ${{ secrets.DB_USER }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Save Terraform Outputs to files
        run: |
          terraform -chdir=terraform output -raw ec2_public_ip > ec2_ip.txt
          terraform -chdir=terraform output -raw ec2_private_ip > ec2_private_ip.txt
          terraform -chdir=terraform output -raw rds_endpoint > rds_endpoint.txt
          terraform -chdir=terraform output -raw bastion_public_ip > bastion_ip.txt

      - name: Verify output files exist before upload
        run: |
          echo "------ ec2_ip.txt ------"
          cat ec2_ip.txt
          echo "------ ec2_private_ip.txt ------"
          cat ec2_private_ip.txt
          echo "------ bastion_ip.txt ------"
          cat bastion_ip.txt
          echo "------ rds_endpoint.txt ------"
          cat rds_endpoint.txt

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: |
            ec2_ip.txt
            ec2_private_ip.txt
            bastion_ip.txt
            rds_endpoint.txt

      - name: Store Terraform outputs as GitHub Secrets
        run: |
          gh secret set EC2_PUBLIC_IP --repo ${{ github.repository }} --body="$(cat ec2_ip.txt)"
          gh secret set EC2_PRIVATE_IP --repo ${{ github.repository }} --body="$(cat ec2_private_ip.txt)"
          gh secret set BASTION_PUBLIC_IP --repo ${{ github.repository }} --body="$(cat bastion_ip.txt)"
          gh secret set RDS_ENDPOINT --repo ${{ github.repository }} --body="$(cat rds_endpoint.txt)"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

          #test2